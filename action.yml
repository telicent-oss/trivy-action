name: Trivy Scan Action
description: |
  This action scans a filesystem/SBOM/Container Image using Trivy
author: Telicent
branding:
  icon: 'lock'
  color: 'green'
inputs:
  scan-ref:
    required: true
    description: |
      The reference to the filesytem path, SBOM file, or container image to scan
  scan-name:
    required: true
    description: |
      A unique name for the scan to disambiguate the Job Artifacts it creates from 
      others created by the same workflow
  scan-type:
    required: true
    description: |
      Specifies the kind of Trivy scan to perform, one of `image`, `fs` or `sbom`.  Other
      values are not currently supported and will cause the action to fail.
  uses-java:
    required: false
    default: "false"
    description: |
      Indicates whether the scan needs the Trivy Java Database available.
  allow-unfixed:
    required: false
    default: "false"
    description: |
      Specifies whether it is permitted for the action to pass if it detects High/Critical 
      vulnerabilities that do not currently have a fix i.e. there is not necessarily anything
      we could do to resolve them at this time.
outputs:
  scan-results:
    value: ${{ steps.generate-outputs.outputs.scan-results }}
    description: |
      The name of a GitHub Actions Artifact that has been uploaded by this action and contains 
      the full SARIF JSON scan results generated by the Trivy scan.
  scan-results-file:
    value: ${{ steps.generate-outputs.outputs.scan-results-file }}
    description: |
      The name of the SARIF JSON results file contained in the uploaded GitHub Actions artifact.
  scan-results-url:
    value: ${{ steps.generate-outputs.outputs.scan-results-url }}
    description: |
      The URL of the GitHub Actions Artifact that has been uploaded by this action and contains 
      the full SARIF JSON scan results generated by the Trivy Scan.
runs:
  using: "composite"
  steps:
    - name: Fail on Unsupported Scan Type
      if: ${{ inputs.scan-type != 'image' && inputs.scan-type != 'fs' && inputs.scan-type != 'sbom' }}
      shell: sh
      run: |
        echo "::error title=Unsupported Scan Type::Received Scan Type '${{ inputs.scan-type}}' which is not supported"
        exit 1

    - name: Setup Trivy
      uses: aquasecurity/setup-trivy@master
      with:
        version: v0.60.0
        cache: true

    - name: Trivy Cache
      id: trivy-cache
      uses: yogeshlonkar/trivy-cache-action@13349295ee133b955ae40a348f14c0290dd5c2b6
      with:
        gh-token: ${{ secrets.GITHUB_TOKEN }}
        prefix: ${{ github.workflow }}

    - name: Download Trivy Java DB
      if: ${{ inputs.uses-java == 'true' && (steps.trivy-cache.outputs.cache-hit == '' || steps.trivy-cache.outputs.cache-hit == 'false') }}
      uses: aquasecurity/trivy-action@master
      env:
        TRIVY_DOWNLOAD_JAVA_DB_ONLY: true
        TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db,ghcr.io/aquasecurity/trivy-java-db:1
      with:
        scan-type: image
        timeout: 10m0s
        cache-dir: .trivy
        # We've explicitly called aquasecurity/setup-trivy already, no need for the trivy-action to do this for us
        skip-setup-trivy: true
        # Counter-intuitive BUT trivy-action has its own cache behaviour which duplicates our own but in a less 
        # flexible way
        cache: false

    - name: Download Trivy Vulnerability DB
      if: ${{ steps.trivy-cache.outputs.cache-hit == '' || steps.trivy-cache.outputs.cache-hit == 'false' }}
      uses: aquasecurity/trivy-action@master
      env:
        TRIVY_DOWNLOAD_DB_ONLY: true
        TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db,ghcr.io/aquasecurity/trivy-db:2
      with:
        scan-type: image
        timeout: 10m0s
        cache-dir: .trivy
        # We've explicitly called aquasecurity/setup-trivy already, no need for the trivy-action to do this for us
        skip-setup-trivy: true
        # Counter-intuitive BUT trivy-action has its own cache behaviour which duplicates our own but in a less 
        # flexible way
        cache: false

    - name: Trivy Vulnerability Scan
      uses: aquasecurity/trivy-action@master
      env:
        TRIVY_SKIP_DB_UPDATE: true
        TRIVY_SKIP_JAVA_DB_UPDATE: true
      with:
        scan-type: ${{ inputs.scan-type }}
        output: ${{ inputs.scan-name }}-trivy-report.json
        format: json
        scan-ref: .
        exit-code: 0
        cache-dir: .trivy
        # We've explicitly called aquasecurity/setup-trivy already, no need for the trivy-action to do this for us
        skip-setup-trivy: true
        # Counter-intuitive BUT trivy-action has its own cache behaviour which duplicates our own but in a less 
        # flexible way
        cache: false

    - name: Add Trivy Scan Results to Job Summary
      shell: bash
      run: |
        cat "${{ inputs.scan-name }}-trivy-report.json" >> $GITHUB_STEP_SUMMARY

    - name: Upload Vulnerability Scan Results
      id: upload-scan-results
      uses: actions/upload-artifact@v4.4.3
      with:
        name: ${{ inputs.scan-name }}-trivy-report
        path: ${{ inputs.scan-name }}-trivy-report.json
        retention-days: 30

    - name: Register Scan Results as Action Output
      shell: sh
      id: generate-outputs
      run: |
        echo "scan-results=${{ inputs.scan-name }}-trivy-report" >> $GITHUB_OUTPUT
        echo "scan-results-file=${{ inputs.scan-name }}-trivy-report.json" >> $GITHUB_OUTPUT
        echo "scan-results-url=${{ steps.upload-scan-results.outputs.artifact-url }}" >> $GITHUB_OUTPUT

    - name: Fail build on High/Criticial Vulnerabilities
      id: gating-scan
      uses: aquasecurity/trivy-action@master
      env:
        TRIVY_SKIP_DB_UPDATE: true
        TRIVY_SKIP_JAVA_DB_UPDATE: true
      with:
        scan-type: ${{ inputs.scan-type }}
        format: table
        output: ${{ env.GITHUB_STEP_SUMMARY }}
        scan-ref: ${{ inputs.scan-ref }}
        severity: HIGH,CRITICAL
        ignore-unfixed: ${{ inputs.allow-unfixed }}
        exit-code: 1
        cache-dir: .trivy
        # We've explicitly called aquasecurity/setup-trivy already, no need for the trivy-action to do this for us
        skip-setup-trivy: true
        # Counter-intuitive BUT trivy-action has its own cache behaviour which duplicates our own but in a less 
        # flexible way
        cache: false

    - name: Add Error to Build if Scan Failed
      if: ${{ failure() && steps.gating-scan.outcome == 'failure' }}
      shell: sh
      run: |
        echo "::error title=High/Critical Vulnerabilities Found::Trivy detected HIGH/CRITICAL vulnerabilities, please review the report and apply relevant fixes"
