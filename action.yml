name: Trivy Scan Action
description: |
  This action scans a filesystem/SBOM/Container Image using Trivy
author: Telicent
branding:
  icon: 'lock'
  color: 'green'
inputs:
  scan-ref:
    required: true
    description: |
      The reference to the filesytem path, SBOM file, or container image to scan
  scan-name:
    required: true
    description: |
      A unique name for the scan to disambiguate the Job Artifacts it creates from 
      others created by the same workflow.

      Note that the given `scan-name` value will be sanitised to remove characters that are 
      not permitted by the actions that consume this value.  You can find the actual names
      used for the report files and artifacts in the action output.
  scan-type:
    required: true
    description: |
      Specifies the kind of Trivy scan to perform, one of `image`, `fs` or `sbom`.  Other
      values are not currently supported and will cause the action to fail.
  remote-vex:
    required: false
    default: ""
    description: |
      Specifies a new line separated list of remote repositories whose VEX statements should be
      retrieved via sparse checkout of their .vex/ directory.  These VEX statements will be used 
      to augment any local VEX statements in the .vex/ directory when scanning for vulnerabilities.
  gh-token:
    required: false
    default: ${{ github.token }}
    description: |
      A GitHub Token needed to determine the current Trivy database version for caching.
      Defaults to `github.token` which is the token for this build, can be overridden if this default token doesn't work
      for your build environment.
  gh-user:
    required: false
    default: ${{ github.actor }}
    description: |
      A GitHub User to use when cloning remote repositories to retrieve remote VEX statements.

      Defaults to `github.actor` which is the user running the build, can be overridden if this default user does not 
      match the user who owns the `gh-token` input e.g. if providing a custom GitHub Token to retrieve VEX statements
      from private repositories.
  uses-java:
    required: false
    default: "false"
    description: |
      Indicates whether the scan needs the Trivy Java Database available.
  allow-unfixed:
    required: false
    default: "false"
    description: |
      Specifies whether it is permitted for the action to pass if it detects High/Critical 
      vulnerabilities that do not currently have a fix i.e. there is not necessarily anything
      we could do to resolve them at this time.
  output-sbom:
    required: false
    default: ""
    description: |
      When specified this provides a filename prefix and the action will additionally output a 
      CycloneDX JSON format SBOM based on the artifacts being scanned.  Note that this filename 
      will be combined with the provided `scan-name` input to ensure a unique filename.

      Please refer to the `sbom-file` output to find the actual output filename.
outputs:
  scan-results:
    value: ${{ steps.generate-outputs.outputs.scan-results }}
    description: |
      The name of a GitHub Actions Artifact that has been uploaded by this action and contains 
      the full Trivy JSON scan results generated by the Trivy scan.
  scan-results-file:
    value: ${{ steps.generate-outputs.outputs.scan-results-file }}
    description: |
      The name of the Trivy JSON results file contained in the uploaded GitHub Actions artifact.

      This file will also exist in the `RUNNER_TEMP` directory for the duration of the calling job.
  scan-results-url:
    value: ${{ steps.generate-outputs.outputs.scan-results-url }}
    description: |
      The URL of the GitHub Actions Artifact that has been uploaded by this action and contains 
      the full Trivy JSON scan results generated by the Trivy Scan.
  sbom:
    value: ${{ steps.generate-outputs.outputs.sbom }}
    description: |
      The name of a GitHub Actions Artifact that has been uploaded by this action and contains a
      CycloneDX JSON format SBOM generated by Trivy.
  sbom-file:
    value: ${{ steps.generate-outputs.outputs.sbom-file }}
    description: |
      The name of the SBOM file, this will be a combination of the `scan-name` and `output-sbom` 
      inputs.

      This file will also exist in the `RUNNER_TEMP` directory for the duration of the calling job.
  sbom-url:
    value: ${{ steps.generate-outputs.outputs.sbom-url }}
    description: |
      The URL of the GitHub Actions Artifact that has been uploaded by this action and contains 
      the full Trivy generated CycloneDX JSON format SBOM.
runs:
  using: "composite"
  steps:
    - name: Fail on Unsupported Scan Type
      # NB - Can't have an array literal directly in an Actions expression, but can use fromJSON() function 
      #      to parse an array literal on the fly, go figure!
      #      See https://github.com/orgs/community/discussions/27223
      if: ${{ !contains(fromJSON('[ "image", "fs", "sbom", "config" ]'), inputs.scan-type) }}
      shell: sh
      run: |
        echo "::error title=${{ github.job }} - Unsupported Scan Type::Received Scan Type '${{ inputs.scan-type}}' which is not supported"
        exit 1

    # As we're going to use the scan name for both output file names and GitHub Actions Artifacts have to sanitise it
    # to remove characters that are disallowed, or would cause those usages to break
    #
    # For GitHub Actions Artifacts this is as follows:
    # 
    # Double quote ", Colon :, Less than <, Greater than >, Vertical bar |, Asterisk *, Question mark ?, Carriage 
    # return \r, Line feed \n, Backslash \, Forward slash /
    #
    # These characters are not allowed in the artifact name due to limitations with certain file systems such as NTFS. 
    # To maintain file system agnostic behavior, these characters are intentionally not allowed to prevent potential 
    # problems with downloads on different file systems.

    - name: Sanitise Scan name
      id: sanitised
      shell: bash
      run: |
        echo "name=$(echo '${{ inputs.scan-name }}' | sed 's/[:/<>|*?\]/-/g' | tr -s '-')" >> $GITHUB_OUTPUT

    - name: Setup Trivy
      uses: aquasecurity/setup-trivy@v0.2.4
      with:
        version: v0.66.0
        cache: true

    - name: Trivy Cache
      id: trivy-cache
      uses: yogeshlonkar/trivy-cache-action@5f355ec5767e3212a19dc0f5f60933ecaa7dcd90
      with:
        gh-token: ${{ inputs.gh-token }}
        prefix: ${{ github.workflow }}-${{ inputs.uses-java == 'true' && 'java' || 'no-java' }}

    - name: Download Trivy Java DB
      if: ${{ inputs.uses-java == 'true' && (steps.trivy-cache.outputs.cache-hit == '' || steps.trivy-cache.outputs.cache-hit == 'false') }}
      uses: aquasecurity/trivy-action@0.33.1
      env:
        TRIVY_DOWNLOAD_JAVA_DB_ONLY: true
        TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db,ghcr.io/aquasecurity/trivy-java-db:1
      with:
        scan-type: image
        timeout: 10m0s
        cache-dir: .trivy
        # We've explicitly called aquasecurity/setup-trivy already, no need for the trivy-action to do this for us
        skip-setup-trivy: true
        # Counter-intuitive BUT trivy-action has its own cache behaviour which duplicates our own but in a less 
        # flexible way
        cache: false

    - name: Download Trivy Vulnerability DB
      if: ${{ steps.trivy-cache.outputs.cache-hit == '' || steps.trivy-cache.outputs.cache-hit == 'false' }}
      uses: aquasecurity/trivy-action@0.31.0
      env:
        TRIVY_DOWNLOAD_DB_ONLY: true
        TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db,ghcr.io/aquasecurity/trivy-db:2
      with:
        scan-type: image
        timeout: 10m0s
        cache-dir: .trivy
        # We've explicitly called aquasecurity/setup-trivy already, no need for the trivy-action to do this for us
        skip-setup-trivy: true
        # Counter-intuitive BUT trivy-action has its own cache behaviour which duplicates our own but in a less 
        # flexible way
        cache: false

    - name: Merge VEX Statements
      id: merge-vex
      uses: telicent-oss/merge-vex-action@v1
      with:
        name: ${{ inputs.scan-name }}
        remote-vex: ${{ inputs.remote-vex }}

    # Perform a full vulnerability to generate a full vulnerability report
    - name: Trivy Vulnerability Scan
      uses: aquasecurity/trivy-action@0.33.1
      env:
        TRIVY_SKIP_DB_UPDATE: true
        TRIVY_SKIP_JAVA_DB_UPDATE: true
        # Use VEX Statements (if available)
        TRIVY_VEX: ${{ steps.merge-vex.outputs.vex-file }}
        # This ensures that anything suppressed by VEX statements (if any) is noted in the Trivy JSON Report
        TRIVY_SHOW_SUPPRESSED: true
      with:
        scan-type: ${{ inputs.scan-type }}
        output: ${{ runner.temp }}/${{ steps.sanitised.outputs.name }}-trivy-report.json
        format: json
        scan-ref: ${{ inputs.scan-ref }}
        # This means even if high severity vulnerabilities are found we'll continue onwards
        # This is intended as we have a later step that scans just for HIGH/CRITICAL and sets this to 1
        #Â meaning the action as a whole fails if high severity vulnerabilities are found
        # But for this step we're just looking to generate a report of all vulnerabilities
        exit-code: 0
        cache-dir: .trivy
        # We've explicitly called aquasecurity/setup-trivy already, no need for the trivy-action to do this for us
        skip-setup-trivy: true
        # Counter-intuitive BUT trivy-action has its own cache behaviour which duplicates our own but in a less
        # flexible way
        cache: false

    - name: Upload Vulnerability Scan Results
      id: upload-scan-results
      uses: actions/upload-artifact@v4.4.3
      with:
        name: ${{ steps.sanitised.outputs.name }}-trivy-report
        path: ${{ runner.temp }}/${{ steps.sanitised.outputs.name }}-trivy-report.json
        retention-days: 30

    - name: Generate SBOM if Requested
      id: generate-sbom
      if: ${{ inputs.output-sbom != '' }}
      uses: aquasecurity/trivy-action@0.33.1
      env:
        TRIVY_SKIP_DB_UPDATE: true
        TRIVY_SKIP_JAVA_DB_UPDATE: true
      with:
        scan-type: ${{ inputs.scan-type }}
        output: ${{ runner.temp }}/${{ inputs.output-sbom}}-${{ steps.sanitised.outputs.name }}-cyclonedx.sbom.json
        format: cyclonedx
        scan-ref: ${{ inputs.scan-ref }}
        cache-dir: .trivy
        # We've explicitly called aquasecurity/setup-trivy already, no need for the trivy-action to do this for us
        skip-setup-trivy: true
        # Counter-intuitive BUT trivy-action has its own cache behaviour which duplicates our own but in a less
        # flexible way
        cache: false

    - name: Upload Generated SBOM
      id: upload-sbom
      if: ${{ inputs.output-sbom != '' }}
      uses: actions/upload-artifact@v4.4.3
      with:
        name: ${{ steps.sanitised.outputs.name }}-cyclonedx-sbom
        path: ${{ runner.temp }}/${{ inputs.output-sbom}}-${{ steps.sanitised.outputs.name }}-cyclonedx.sbom.json
        retention-days: 30

    - name: Register Scan Results as Action Output
      shell: sh
      id: generate-outputs
      run: |
        echo "scan-results=${{ steps.sanitised.outputs.name }}-trivy-report" >> $GITHUB_OUTPUT
        echo "scan-results-file=${{ steps.sanitised.outputs.name }}-trivy-report.json" >> $GITHUB_OUTPUT
        echo "scan-results-url=${{ steps.upload-scan-results.outputs.artifact-url }}" >> $GITHUB_OUTPUT

        # Additionally add SBOM related artifacts if we've been asked to generate a SBOM
        if [ -n "${{ inputs.output-sbom }}" ]; then
          echo "sbom=${{ steps.sanitised.outputs.name }}-cyclonedx-sbom" >> $GITHUB_OUTPUT
          echo "sbom-file=${{ inputs.output-sbom}}-${{ steps.sanitised.outputs.name }}-cyclonedx.sbom.json" >> $GITHUB_OUTPUT
          echo "sbom-url=${{ steps.upload-sbom.outputs.artifact-url}}" >> $GITHUB_OUTPUT
        fi

    - name: Get Report template
      uses: actions/checkout@v4
      with:
        repository: telicent-oss/trivy-action
        ref: main
        sparse-checkout: |
          report-template.tpl
        sparse-checkout-cone-mode: false
        path: .trivy-templates/

    - name: Fail build on High/Criticial Vulnerabilities
      id: gating-scan
      uses: aquasecurity/trivy-action@0.33.1
      env:
        TRIVY_SKIP_DB_UPDATE: true
        TRIVY_SKIP_JAVA_DB_UPDATE: true
        # Use VEX Statements (if available)
        TRIVY_VEX: ${{ steps.merge-vex.outputs.vex-file }}
        TRIVY_SHOW_SUPPRESSED: true
      with:
        scan-type: ${{ inputs.scan-type }}
        format: template
        template: "@.trivy-templates/report-template.tpl"
        output: ${{ runner.temp }}/${{ steps.sanitised.outputs.name }}-trivy-gating-report.txt
        scan-ref: ${{ inputs.scan-ref }}
        severity: HIGH,CRITICAL
        ignore-unfixed: ${{ inputs.allow-unfixed }}
        # Exit Code set to 1 so if any HIGH/CRITICAL vulnerabilities exist this step fails and the action fails
        exit-code: 1
        cache-dir: .trivy
        # We've explicitly called aquasecurity/setup-trivy already, no need for the trivy-action to do this for us
        skip-setup-trivy: true
        # Counter-intuitive BUT trivy-action has its own cache behaviour which duplicates our own but in a less
        # flexible way
        cache: false

    - name: Display Gating Vulnerabilities in Job Summary (if any)
      if: ${{ always() }}
      shell: bash
      run: |
        if [ -f "${{ runner.temp }}/${{ steps.sanitised.outputs.name }}-trivy-gating-report.txt" ]; then
          echo "# Trivy \`${{ inputs.scan-type }}\` scan on \` ${{inputs.scan-ref }}\`" >> "$GITHUB_STEP_SUMMARY"
          cat "${{ runner.temp }}/${{ steps.sanitised.outputs.name }}-trivy-gating-report.txt" >> "$GITHUB_STEP_SUMMARY"
        fi

    - name: Add Error to Build if Scan Failed
      if: ${{ failure() && steps.gating-scan.outcome == 'failure' }}
      shell: sh
      run: |
        echo "::error title=${{ github.job }} - High/Critical Vulnerabilities Found::Trivy detected HIGH/CRITICAL vulnerabilities scanning ${{ inputs.scan-ref }}, please review the report and apply relevant fixes.  Report is attached as build artifact ${{ steps.sanitised.outputs.name }}-trivy-report and rendered as a human readable job summary."

    - name: Cleanup Templates
      if: ${{ always() }}
      shell: sh
      run: |
        rm -Rf .trivy-templates/
