name: Trivy Scan Action
description: |
  This action scans a filesystem/SBOM/Container Image using Trivy
author: Telicent
branding:
  icon: 'lock'
  color: 'green'
inputs:
  scan-ref:
    required: true
    description: |
      The reference to the filesytem path, SBOM file, or container image to scan
  scan-name:
    required: true
    description: |
      A unique name for the scan to disambiguate the Job Artifacts it creates from 
      others created by the same workflow.

      Note that the given `scan-name` value will be sanitised to remove characters that are 
      not permitted by the actions that consume this value.  You can find the actual names
      used for the report files and artifacts in the action output.
  scan-type:
    required: true
    description: |
      Specifies the kind of Trivy scan to perform, one of `image`, `fs` or `sbom`.  Other
      values are not currently supported and will cause the action to fail.
  gh-token:
    required: false
    default: ${{ github.token }}
    description: |
      A GitHub Token needed to determine the current Trivy database version for caching.
      Defaults to github.token which is the token for this build, can be overridden if this default token doesn't work
      for your build environment.
  uses-java:
    required: false
    default: "false"
    description: |
      Indicates whether the scan needs the Trivy Java Database available.
  allow-unfixed:
    required: false
    default: "false"
    description: |
      Specifies whether it is permitted for the action to pass if it detects High/Critical 
      vulnerabilities that do not currently have a fix i.e. there is not necessarily anything
      we could do to resolve them at this time.
outputs:
  scan-results:
    value: ${{ steps.generate-outputs.outputs.scan-results }}
    description: |
      The name of a GitHub Actions Artifact that has been uploaded by this action and contains 
      the full SARIF JSON scan results generated by the Trivy scan.
  scan-results-file:
    value: ${{ steps.generate-outputs.outputs.scan-results-file }}
    description: |
      The name of the SARIF JSON results file contained in the uploaded GitHub Actions artifact.
  scan-results-url:
    value: ${{ steps.generate-outputs.outputs.scan-results-url }}
    description: |
      The URL of the GitHub Actions Artifact that has been uploaded by this action and contains 
      the full SARIF JSON scan results generated by the Trivy Scan.
runs:
  using: "composite"
  steps:
    - name: Fail on Unsupported Scan Type
      if: ${{ inputs.scan-type != 'image' && inputs.scan-type != 'fs' && inputs.scan-type != 'sbom' }}
      shell: sh
      run: |
        echo "::error title=${{ github.job }} - Unsupported Scan Type::Received Scan Type '${{ inputs.scan-type}}' which is not supported"
        exit 1

    # As we're going to use the scan name for both output file names and GitHub Actions Artifacts have to sanitise it
    # to remove characters that are disallowed, or would cause those usages to break
    #
    # For GitHub Actions Artifacts this is as follows:
    # 
    # Double quote ", Colon :, Less than <, Greater than >, Vertical bar |, Asterisk *, Question mark ?, Carriage 
    # return \r, Line feed \n, Backslash \, Forward slash /
    #
    # These characters are not allowed in the artifact name due to limitations with certain file systems such as NTFS. 
    # To maintain file system agnostic behavior, these characters are intentionally not allowed to prevent potential 
    # problems with downloads on different file systems.

    - name: Sanitise Scan name
      id: sanitised
      shell: bash
      run: |
        echo "name=$(echo '${{ inputs.scan-name }}' | sed 's/[:/<>|*?\]/-/g' | tr -s '-')" >> $GITHUB_OUTPUT

    - name: Setup Trivy
      uses: aquasecurity/setup-trivy@v0.2.2
      with:
        version: v0.60.0
        cache: true

    - name: Trivy Cache
      id: trivy-cache
      uses: yogeshlonkar/trivy-cache-action@13349295ee133b955ae40a348f14c0290dd5c2b6
      with:
        gh-token: ${{ inputs.gh-token }}
        prefix: ${{ github.workflow }}-${{ inputs.uses-java == 'true' && 'java' || 'no-java' }}

    - name: Download Trivy Java DB
      if: ${{ inputs.uses-java == 'true' && (steps.trivy-cache.outputs.cache-hit == '' || steps.trivy-cache.outputs.cache-hit == 'false') }}
      #uses: aquasecurity/trivy-action@0.30.0
      uses: rvesse/trivy-action@fix/overwrite-envs
      env:
        TRIVY_DOWNLOAD_JAVA_DB_ONLY: true
        TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db,ghcr.io/aquasecurity/trivy-java-db:1
      with:
        scan-type: image
        timeout: 10m0s
        cache-dir: .trivy
        # We've explicitly called aquasecurity/setup-trivy already, no need for the trivy-action to do this for us
        skip-setup-trivy: true
        # Counter-intuitive BUT trivy-action has its own cache behaviour which duplicates our own but in a less 
        # flexible way
        cache: false

    - name: Download Trivy Vulnerability DB
      if: ${{ steps.trivy-cache.outputs.cache-hit == '' || steps.trivy-cache.outputs.cache-hit == 'false' }}
      #uses: aquasecurity/trivy-action@0.30.0
      uses: rvesse/trivy-action@fix/overwrite-envs
      env:
        TRIVY_DOWNLOAD_DB_ONLY: true
        TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db,ghcr.io/aquasecurity/trivy-db:2
      with:
        scan-type: image
        timeout: 10m0s
        cache-dir: .trivy
        # We've explicitly called aquasecurity/setup-trivy already, no need for the trivy-action to do this for us
        skip-setup-trivy: true
        # Counter-intuitive BUT trivy-action has its own cache behaviour which duplicates our own but in a less 
        # flexible way
        cache: false

    - name: Trivy Vulnerability Scan
      #uses: aquasecurity/trivy-action@0.30.0
      uses: rvesse/trivy-action@fix/overwrite-envs
      env:
        TRIVY_SKIP_DB_UPDATE: true
        TRIVY_SKIP_JAVA_DB_UPDATE: true
      with:
        scan-type: ${{ inputs.scan-type }}
        output: ${{ steps.sanitised.outputs.name }}-trivy-report.json
        format: json
        scan-ref: ${{ inputs.scan-ref }}
        exit-code: 0
        cache-dir: .trivy
        # We've explicitly called aquasecurity/setup-trivy already, no need for the trivy-action to do this for us
        skip-setup-trivy: true
        # Counter-intuitive BUT trivy-action has its own cache behaviour which duplicates our own but in a less 
        # flexible way
        cache: false

    - name: Upload Vulnerability Scan Results
      id: upload-scan-results
      uses: actions/upload-artifact@v4.4.3
      with:
        name: ${{ steps.sanitised.outputs.name }}-trivy-report
        path: ${{ steps.sanitised.outputs.name }}-trivy-report.json
        retention-days: 30

    - name: Register Scan Results as Action Output
      shell: sh
      id: generate-outputs
      run: |
        echo "scan-results=${{ steps.sanitised.outputs.name }}-trivy-report" >> $GITHUB_OUTPUT
        echo "scan-results-file=${{ steps.sanitised.outputs.name }}-trivy-report.json" >> $GITHUB_OUTPUT
        echo "scan-results-url=${{ steps.upload-scan-results.outputs.artifact-url }}" >> $GITHUB_OUTPUT

    - name: Get Report template
      uses: actions/checkout@v4
      with:
        repository: telicent-oss/trivy-action
        ref: self-tests # TODO Set to main once the current PR is finished
        sparse-checkout: |
          report-template.tpl
        sparse-checkout-cone-mode: false
        path: .trivy-templates/

    - name: Fail build on High/Criticial Vulnerabilities
      id: gating-scan
      #uses: aquasecurity/trivy-action@0.30.0
      uses: rvesse/trivy-action@fix/overwrite-envs
      env:
        TRIVY_SKIP_DB_UPDATE: true
        TRIVY_SKIP_JAVA_DB_UPDATE: true
      with:
        scan-type: ${{ inputs.scan-type }}
        format: template
        template: "@.trivy-templates/report-template.tpl"
        output: ${{ steps.sanitised.outputs.name }}-trivy-gating-report.txt
        scan-ref: ${{ inputs.scan-ref }}
        severity: HIGH,CRITICAL
        ignore-unfixed: ${{ inputs.allow-unfixed }}
        exit-code: 1
        cache-dir: .trivy
        # We've explicitly called aquasecurity/setup-trivy already, no need for the trivy-action to do this for us
        skip-setup-trivy: true
        # Counter-intuitive BUT trivy-action has its own cache behaviour which duplicates our own but in a less 
        # flexible way
        cache: false

    - name: Display Gating Vulnerabilities in Job Summary (if any)
      if: ${{ always() }}
      shell: bash
      run: |
        if [ -f "${{ steps.sanitised.outputs.name }}-trivy-gating-report.txt" ]; then
          echo "# Trivy \`${{ inputs.scan-type }}\` scan on \` ${{inputs.scan-ref }}\`" >> "$GITHUB_STEP_SUMMARY"
          cat "${{ steps.sanitised.outputs.name }}-trivy-gating-report.txt" >> "$GITHUB_STEP_SUMMARY"
        fi

    - name: Add Error to Build if Scan Failed
      if: ${{ failure() && steps.gating-scan.outcome == 'failure' }}
      shell: sh
      run: |
        echo "::error title=${{ github.job }} - High/Critical Vulnerabilities Found::Trivy detected HIGH/CRITICAL vulnerabilities scanning ${{ inputs.scan-ref }}, please review the report and apply relevant fixes.  Report is attached as build artifact ${{ steps.sanitised.outputs.name }}-trivy-report and rendered as a human readable job summary."

    - name: Cleanup templates/
      if: ${{ always() }}
      shell: sh
      run: |
        rm -Rf .trivy-templates/
