name: Action Self-Tests
on:
  push:
    branches:
      - "**"
    tags:
      - "**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cache-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [ "telicent/telicent-java21:1.2.12", "telicent/telicent-access-api:1.4.2", "alpine:3.21.3" ]
      fail-fast: true
    steps:
      - name: Cache Images
        uses: telicent-oss/docker-image-cache-action@v1
        with:
          images: ${{ matrix.image }}
          restore-only: false

  matrix-scan:
    runs-on: ubuntu-latest
    needs: cache-images
    strategy:
      matrix:
        image: [ "telicent/telicent-java21:1.2.12", "alpine:3.21.3" ]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: telicent-oss/telicent-base-images

      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Restore Cached Image
        uses: telicent-oss/docker-image-cache-action@v1
        with:
          images: ${{ matrix.image }}
          restore-only: true

      - name: Trivy Image Scan that Passes
        id: trivy-scan
        uses: telicent-oss/trivy-action@v1
        with:
          scan-type: image
          scan-ref: ${{ matrix.image }}
          scan-name: matrix-${{ matrix.image }}
          uses-java: true

  good-image-scan:
    runs-on: ubuntu-latest
    needs: cache-images
    steps:
      # Need to checkout as we need the VEX statements for the scan to pass!
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: telicent-oss/telicent-base-images

      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Restore Cached Image
        uses: telicent-oss/docker-image-cache-action@v1
        with:
          images: telicent/telicent-java21:1.2.12
          restore-only: true
        
      - name: Trivy Image Scan that Passes
        id: trivy-scan
        uses: telicent-oss/trivy-action@v1
        with:
          scan-type: image
          scan-ref: telicent/telicent-java21:1.2.12
          scan-name: good-image
          uses-java: true

  remote-vex-scan:
    needs: cache-images
    runs-on: ubuntu-latest
    steps:
      # Intentionally not checking out, relying on remote-vex support

      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Restore Cached Image
        uses: telicent-oss/docker-image-cache-action@v1
        with:
          images: telicent/telicent-java21:1.2.12
          restore-only: true

      - name: Trivy Image Scan that Passes
        id: trivy-scan
        uses: telicent-oss/trivy-action@v1
        with:
          scan-type: image
          scan-ref: telicent/telicent-java21:1.2.12
          scan-name: remote-vex
          uses-java: true
          remote-vex: |
            telicent-oss/trivy-action@deduplicate_vex_entries
            telicent-oss/trivy-action
              telicent-oss/no-such-repo    
            telicent-oss/telicent-base-images

  failing-image-scan:
    runs-on: ubuntu-latest
    needs: cache-images
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Restore Cached Image
        uses: telicent-oss/docker-image-cache-action@v1
        with:
          images: telicent/telicent-access-api:1.4.2
          restore-only: true
        
      - name: Trivy Image Scan that Fails
        id: trivy-scan
        continue-on-error: true
        uses: telicent-oss/trivy-action@v1
        with:
          scan-type: image
          scan-ref: telicent/telicent-access-api:1.4.2
          scan-name: failing-image

      - name: Fail if Trivy didn't fail
        if: ${{ failure() && steps.trivy-scan.outcome != 'failed' }}
        run: |
          exit 1

  empty-remote-vex:
    runs-on: ubuntu-latest
    needs: cache-images
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Restore Cached Image
        uses: telicent-oss/docker-image-cache-action@v1
        with:
          images: telicent/telicent-access-api:1.4.2
          restore-only: true
        
      - name: Trivy Image Scan that Fails
        id: trivy-scan
        continue-on-error: true
        uses: telicent-oss/trivy-action@v1
        with:
          scan-type: image
          scan-ref: telicent/telicent-access-api:1.4.2
          scan-name: empty-remote-vex
          # Intentionally empty whitespace input for remote-vex
          remote-vex: |
               
      - name: Fail if Trivy didn't fail
        if: ${{ failure() && steps.trivy-scan.outcome != 'failed' }}
        run: |
          exit 1

      - name: Download Scan Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.trivy-scan.outputs.scan-results }}

  filesystem-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: telicent-oss/smart-caches-core

      - name: Trivy Filesystem Scan
        id: trivy-scan
        uses: telicent-oss/trivy-action@v1
        with:
          scan-type: fs
          scan-ref: .
          scan-name: telicent-smart-caches-core
          uses-java: true

  sbom-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: telicent-oss/smart-caches-core

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Maven Build to generate SBOMs
        run: |
          mvn clean install -q -DskipTests -Dgpg.skip=true

      - name: Detect Maven Version
        run: |
          echo "PROJECT_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_ENV

      - name: Trivy SBOM Scan
        id: trivy-scan
        uses: telicent-oss/trivy-action@v1
        with:
          scan-type: sbom
          scan-ref: cli/cli-debug/target/cli-debug-${{ env.PROJECT_VERSION }}-bom.json
          scan-name: telicent-cli-debug
          uses-java: true

  unsupported-scan-type:
    runs-on: ubuntu-latest
    steps:
      - name: Unsupported Trivy Scan type
        id: trivy-scan
        uses: telicent-oss/trivy-action@v1
        continue-on-error: true
        with:
          scan-type: foo
          scan-ref: .
          scan-name: unsupported

      - name: Fail if Trivy didn't fail
        if: ${{ failure() && steps.trivy-scan.outcome != 'failed' }}
        run: |
          exit 1

  misconfiguration-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Misconfiguration Scan
        id: trivy-scan
        uses: telicent-oss/trivy-action@v1
        continue-on-error: true
        with:
          scan-type: config
          scan-name: docker-misconfiguration
          scan-ref: test-data/Dockerfile.root

      - name: Fail if Trivy didn't fail
        if: ${{ failure() && steps.trivy-scan.outcome != 'failed' }}
        run: |
          exit 1

  configuration-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Misconfiguration Scan
        id: trivy-scan
        uses: telicent-oss/trivy-action@v1
        with:
          scan-type: config
          scan-name: docker-configuration
          scan-ref: test-data/Dockerfile.good

  generate-sbom:
    runs-on: ubuntu-latest
    needs: cache-images
    steps:
      # Need to checkout as we need the VEX statements for the scan to pass!
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: telicent-oss/telicent-base-images

      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Restore Cached Image
        uses: telicent-oss/docker-image-cache-action@v1
        with:
          images: telicent/telicent-java21:1.2.12
          restore-only: true

      - name: Trivy Image Scan that generates a SBOM
        id: trivy-scan
        uses: telicent-oss/trivy-action@v1
        with:
          scan-type: image
          scan-ref: telicent/telicent-java21:1.2.12
          scan-name: generate-sbom
          uses-java: true
          output-sbom: docker

      - name: Verify SBOM available
        if: ${{ always() }}
        run: |
          if [ ! -f "${RUNNER_TEMP}/${{ steps.trivy-scan.outputs.sbom-file }}" ]; then
            echo "::error title=Cleanup Failed::Generated SBOM file missing from ${RUNNER_TEMP} directory"
            ls -la ${RUNNER_TEMP}
            exit 1
          fi

      - name: Add SBOM to Job Summary
        shell: bash
        run: |
          echo "\`\`\`json" >> "${GITHUB_STEP_SUMMARY}"
          cat "${RUNNER_TEMP}/${{ steps.trivy-scan.outputs.sbom-file }}" >> "${GITHUB_STEP_SUMMARY}"
          echo "\`\`\`" >> "${GITHUB_STEP_SUMMARY}"
    
      - name: Download Generated SBOM Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.trivy-scan.outputs.sbom }}

      - name: Verify SBOM file now available in workspace directory
        run: |
          if [ ! -f "${{ steps.trivy-scan.outputs.sbom-file }}" ]; then
            echo "::error title=Missing SBOM::SBOM file ${{ steps.trivy-scan.outputs.sbom-file }} not available as expected"
          fi

      - name: Show Workspace Contents
        if: ${{ always() }}
        run: |
          ls -la

